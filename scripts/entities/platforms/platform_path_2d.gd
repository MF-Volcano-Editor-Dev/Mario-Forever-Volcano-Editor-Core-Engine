@tool
class_name PlatformPathFollower2D extends PathFollow2D

## A type of [PathFollow2D] but provided behaviors that are benefit for moving a platform according to a given route.
##
## This will automatically generate a [RemoteTransform2D] that is automatically generated on readiness of this object, and is used to bind an object to move along with the platform. See [member transformer_path] for more details.[br]
## [br]
## [b]Note 1:[/b] Once a [RemoteTransform2D] is generated under this node, please redirect its [member RemoteTransform2D.remote_path] to the path to the object as platform.[br]
## [b]Note 2:[/b] Please keep the platform the same level as this object:
## [codeblock]
## Path2D
## |- PlatformPathFollower2D
## |--- PlatformTransRemoter2D
## |- Platform
## [/codeblock]

## If [code]true[/code], the platform can only move towards one direction.[br]
## [br]
## [b]Note:[/b] Generally, please turn on [member PathFollow2D.loop] if this is on.
@export var oneway: bool:
	set(value):
		oneway = value
		if !oneway:
			loop = false
@export_group("Physics")
## Moving direction of the platform.[br]
## [b]"Forward"[/b] refers to the direction along the [Path2D], while [b]"Backwards"[/b] is against it.
@export_enum("Forward: 1", "Backward: -1") var direction: int = 1:
	set(value):
		direction = value
		if direction == 0:
			direction = [-1, 1].pick_random()
## Speed of the movement
@export_range(0, 1, 0.001, "or_greater", "hide_slider", "suffix:px/s") var speed: float = 100
@export_group("Smooth Turning")
## If [code]true[/code], the platform will process smooth transmission on its movement rather than returning back.
@export var smooth_edge: bool
## Distance of the transmission
@export_range(0, 512, 0.001, "suffix:px") var smooth_turning_buffer_distance: float = 32
@export_group("Fixed References")
## Generated by the platform in editor mode.[br]
## [br]
## [b]Note:[/b] If you remove the remoter, please reload the scene and this will automatically generate a new one.
## @deprecated
@export var transformer_path: NodePath

var _activated: bool = true
var _step: int
var _gpos_delta: Vector2

@onready var _global_pos: Vector2 = global_position

#region == Tool setters ==
func _init() -> void:
	oneway = oneway # Triggers setter to affect `loop`

func _property_get_revert(property: StringName) -> Variant:
	match property:
		&"loop":
			return false
	return null

func _property_can_revert(property: StringName) -> bool:
	match property:
		&"loop":
			return true
		&"transoformer_path":
			return false
	return false
#endregion


#region == Built-ins ==
func _ready() -> void:
	_init_remote_transform()

func _physics_process(delta: float) -> void:
	_move(delta)
#endregion


func _move(delta: float) -> void:
	if Engine.is_editor_hint():
		return
	if !_activated:
		return
	
	_global_pos = global_position
	
	match _step:
		0: # Move
			progress += direction * speed * delta
			if (direction > 0 && progress_ratio >= 1) || \
				(direction < 0 && progress_ratio <= 0):
					_step = 1
		1: # Edge
			if oneway:
				return
			elif smooth_edge:
				_step = 2
			else:
				direction *= -1
				_step = 0
		2: # Smooth turning
			_step = 3
			
			var t: float = (2 * smooth_turning_buffer_distance) / speed
			var tw: Tween = create_tween().set_trans(Tween.TRANS_QUAD)
			tw.tween_property(self, ^"h_offset", smooth_turning_buffer_distance * direction, t).set_ease(Tween.EASE_OUT)
			tw.tween_property(self, ^"h_offset", 0, t).set_ease(Tween.EASE_IN)
			await tw.finished
			
			direction *= -1
			_step = 0
	
	_gpos_delta = global_position - _global_pos


# Editor: help to provide a RemoteTransform2D
func _init_remote_transform() -> void:
	if !Engine.is_editor_hint():
		return
	if get_node_or_null(transformer_path) is RemoteTransform2D:
		return
	
	var rm := RemoteTransform2D.new()
	add_child(rm)
	rm.name = &"PlatformTransRemoter2D"
	rm.update_rotation = false
	rm.owner = owner
	rm.force_update_transform()
	transformer_path = get_path_to(rm)


## Activates the movement.
func activate() -> void:
	_activated = true

## Dectivates the movement.
func deactivate() -> void:
	_activated = false

## Returns global position delta
func get_global_pos_delta() -> Vector2:
	return _gpos_delta
